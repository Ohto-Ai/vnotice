#!/bin/bash 
VERSION="v1.0.1"

FILE_NAME="vnotice"
CONFIG_NAME="vnotice.config"
INSTALL_FILE_NAME=$FILE_NAME.install
INSTALL_PATH=~/bin/
LINK_PATH=/usr/bin/
GITHUB_URL=https://github.com.cnpmjs.org/
GITHUBAPI_URL=https://api.github.com/
USER_REPO_NAME="Ohto-Ai/vnotice"

# load setting
if [ -f $INSTALL_PATH$CONFIG_NAME ]; then
    source $INSTALL_PATH$CONFIG_NAME
fi


CURRENT_ROBOT_ID=$ROBOT_ID


FLAG_ShowOutPut="false"
FLAG_ShowCommand="true"
FLAG_ShowFormat="true"
MSG_CommandOutput="null"

SELF_FILE=$0

function query_latest_version()
{
    pattern="tag_name"
    json=`curl "${GITHUBAPI_URL}repos/$USER_REPO_NAME/releases/latest" 2>/dev/null`
    echo $json | grep -Po "\"$pattern\":.*?[^\\\\]\","| perl -pe "s/\"$pattern\":\\s*//; s/^\"//; s/\",$//"
}

function download_version()
{
    version=$1
    echo -ne "\033[33mFile downloading [$FILE_NAME]...\033[0m\n"
    wget -O $INSTALL_FILE_NAME $GITHUB_URL$USER_REPO_NAME/releases/download/$version/$FILE_NAME \
    && success=0 || success=-1
    if [ $success == 0 ]; then
        echo -ne "Download \033[33msuccess\033[0m\n" 
    else
        echo -ne "Download \033[31mfailed\033[0m\n"           
    fi
    return $success
}

function check_install()
{
    if [ -L $LINK_PATH$FILE_NAME ] && [ -f $INSTALL_PATH$FILE_NAME ]; then
        return 0
    fi
    return -1
}

function query_installed_version()
{
    msg=`vnotice -v 2>/dev/null`
    echo ${msg#* }
}

function install()
{
    echo "Installing..."

    if [ ! -d $INSTALL_PATH ]; then
        mkdir $INSTALL_PATH
    fi
    
    if [ -L $LINK_PATH$FILE_NAME ]; then
        sudo rm -rf $LINK_PATH$FILE_NAME
    fi

    mv $INSTALL_FILE_NAME $INSTALL_PATH$FILE_NAME && \
    chmod a+x $INSTALL_PATH$FILE_NAME && \
    sudo ln -s $INSTALL_PATH$FILE_NAME $LINK_PATH$FILE_NAME && \
    echo -ne "Install \033[33msuccess\033[0m\n" || echo -ne "Install \033[31mfailed\033[0m\n"
}

if [ $# -eq 0 ]; then
    echo "Check install"

    check_install
    if [ ! $? -eq  0 ]; then
        # install this
        echo "Install Version $VERSION ..."
        cp $SELF_FILE $INSTALL_FILE_NAME
        install
    else
        INSTALLED_VERSION=`query_installed_version`
        if [ $VERSION \> $INSTALLED_VERSION ]; then
            # install this
            echo "Install Version $VERSION ..."
            cp $SELF_FILE $INSTALL_FILE_NAME
            install
        fi
    fi

    INSTALLED_VERSION=`query_installed_version`

    # todo 添加定时升级任务
    echo "Check update..."

    LATEST_VERSION=`query_latest_version`
    echo "Latest version is $LATEST_VERSION"

    if [ $LATEST_VERSION"x" == "x" ]; then
        echo "No Version Found!"
        exit 0;
    fi
    if [ $LATEST_VERSION \> $INSTALLED_VERSION ]; then
        echo "Latest version $LATEST_VERSION found. Current version is $INSTALLED_VERSION"
        download_version $LATEST_VERSION
        if [ $? -eq 0 ]; then
            install
        else
            exit -1
        fi
    else
        echo "Current Version $INSTALLED_VERSION is lateset version!"
    fi
    exit 0
fi

# todo use getotps to handle options
# while getopts 'h:j:m:u' OPT; do
#     case $OPT in
#         j) JAVA_DIR="$OPTARG";;
#         m) MAVEN_DIR="$OPTARG";;
#         u) upload="true";;
#         h) usage;;
#         ?) usage;;
#     esac
# done


# set flags
for i in $(seq 1 $#); do 
    # echo "Debug: "${@:i:1}
    case ${@:i:1} in
        -o) 
            FLAG_ShowOutPut="true"
            echo "Open output"
            ;;
        -r) 
            CURRENT_ROBOT_ID=${@:i+1:1}
        	let i=i+1
            ;;
        -h)
            FLAG_ShowCommand="false"
            echo "Hide command"
            ;;
        -c) 
            let i=i+1
            for j in $(seq $i $#); do 
                command[$j-$i]=${@:j:1}
            done
            echo "Set command \"${command[*]}\""
            break
            ;;
        -v)
            echo "vnotice ${VERSION}"
            exit 0
            ;;
        -u)
            FLAG_ShowFormat="false"
            echo "Hide fromat"
            ;;
        -help)
            echo \
'Usage: vnotice <tags> -c {command}
Description:
    -v version
    -o open output 
    -r choose robot
    -h hide command
    -u show output only
    -c set commands
    -help show help
e.g.
    vnotice -c ls -l
    ls -l; vnotice -u -c echo "ls returned $?"
Contact:
    Dong Jie <boy_dongjie@foxmail.com>
    Zhu Guangfeng <zhu.thatboy@outlook.com>
    '
        exit 0;
        ;;
    esac
done

# exit when command is nul
if [ ${#command[*]} -lt 1 ]; then
    exit 0
fi

# run command
job_start_time=`date`
MSG_CommandOutput=`eval ${command[*]} 2>&1` && success="success" || success="failed"
# connect message
if [ "${FLAG_ShowFormat}" == "true" ]; then
    message=`echo -e "**START**\n> <font color=\\\\\"info\\\\\">${job_start_time}</font>\n\n**FINISH**\n> <font color=\\\\\"info\\\\\">$(date)</font>\n\n**Path**\n\n> <font color=\\\\\"comment\\\\\"> $(pwd)</font>\n\n"` 

    if [ "${FLAG_ShowCommand}" == "true" ]; then
        message=${message}`echo -e "\n\n**Cmd**\n\n> <font color=\\\\\"comment\\\\\">${command[*]}</font>\n\n"`
    fi 
    if [ "$success" == "success" ]; then
        message=${message}`echo -e "\n\n**Status**\n\n> <font color=\\\\\"info\\\\\">${success}</font>\n\n"` 
    else
        message=${message}`echo -e "\n\n**Status**\n\n> <font color=\\\\\"warning\\\\\">${success}</font>\n\n"` 
    fi

    if [ "${FLAG_ShowOutPut}" == "true" ]; then
       message=${message}`echo -e "\n\n**output**\n> "`
        message=${message}${MSG_CommandOutput} 
    fi
else
    message=${message}${MSG_CommandOutput} 
fi 

json_msg="{ \"msgtype\": \"markdown\", \"markdown\": { \"content\": \"${message}\" } }"; 
# send message
curl "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${CURRENT_ROBOT_ID}" -H 'Content-Type: application/json' -d "${json_msg}"
echo 
# return code
if [ ${success} == "failed" ]; then
    exit -1
fi

