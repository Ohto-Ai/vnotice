#!/bin/bash 

# software info
FILE_NAME="vnotice"
CONFIGFILE=".config"
INSTALLPATH=~/bin/ohtoai/vnotice/
CONFIGFILE=.config
VERSION="v1.1.2"

######### message function #########
function info()
{
    echo -ne "\033[35m[Info]\033[0m vnotice: $*\n"
}

function warning()
{
    echo -ne "\033[34m[Warning]\033[0m vnotice: $*\n"
}

function error()
{
    echo -ne "\033[31m[Error]\033[0m vnotice: \033[31m$*\033[0m\n"
}


function help()
{
    echo -ne \
'Usage: \033[35mvnotice\033[0m \033[34m<tags>\033[0m | \033[34m-c\033[0m {command} | \033[34m-m\033[0m {message}
Description:
    \033[34m-v\033[0m | \033[34m--version     \033[0m     show version
    \033[34m-o\033[0m | \033[34m--output      \033[0m     open output 
    \033[34m-r\033[0m | \033[34m--robot       \033[0m     choose robot
    \033[34m-u\033[0m | \033[34m--only-output \033[0m     show output only
    \033[34m-c\033[0m | \033[34m--command     \033[0m     set commands
    \033[34m-h\033[0m | \033[34m--help        \033[0m     show help
    \033[34m-m\033[0m | \033[34m--message     \033[0m     show message without command
e.g.
    \033[35mvnotice\033[0m \033[34m-c ls -l\033[0m
    \033[35mls\033[0m \033[34m-l\033[0m; \033[35mvnotice\033[0m \033[34m-u -c echo "ls returned $?"\033[0m
Contact:
    Dong Jie <\033[36mboy_dongjie@foxmail.com\033[0m>
    Zhu Guangfeng <\033[36mzhu.thatboy@outlook.com\033[0m>
Repo:
    \033[33mhttps://github.com/Ohto-Ai/vnotice\033[0m
'
}

FLAG_ShowOutPut=false
FLAG_ShowFormat=true

# load setting
if [ -f $INSTALLPATH$CONFIGFILE ]; then
    source $INSTALLPATH$CONFIGFILE
else
    warning Missing config!
fi
CURRENT_ROBOT_ID=$ROBOT_ID

######### main #########

function main()
{
    if [ $# -eq 0 ]; then
        echo "vnotice ${VERSION}"
        help
        exit 0
    fi
    FLAG_unknown_parameter=false
    # set flags
    for ((i=1; i<=$#; i++)) do 
        # echo "Debug: para["$i"]="${@:i:1}
        case ${@:i:1} in
            -o | --output) 
                FLAG_ShowOutPut=true
                info "Open output"
                ;;
            -r | --robot) 
                let i=i+1
                CURRENT_ROBOT_ID=${@:i:1}
                info "Robot =" $CURRENT_ROBOT_ID
                ;;
            -c | --command) 
                let i=i+1
                for j in $(seq $i $#); do 
                    command[$j-$i]=${@:j:1}
                done
                info "Set command \"${command[*]}\""
                break
                ;;
            -v | --version)
                echo "vnotice ${VERSION}"
                exit 0
                ;;
            -u | --only-output)
                FLAG_ShowFormat=false
                info "Show output only"
                ;;
            -h | --help)
                help
            ;;
            -m | --message)
                let i=i+1
                for j in $(seq $i $#); do 
                    echo_message[$j-$i]=${@:j:1}
                done
                info "Set message \"${echo_message[*]}\""
                break
                ;;
            *)
                error "Unknown parameter \"${@:i:1}\""
                FLAG_unknown_parameter=true
        esac
    done
    if [ "$FLAG_unknown_parameter" == "true" ]; then
        exit -1
    fi

    if [ ! ${#echo_message[*]} -lt 1 ]; then
        message=${message}`echo $echo_message`

        json_msg="{ \"msgtype\": \"markdown\", \"markdown\": { \"content\": \"${message}\" } }"; 
        # send message
        info `curl "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${CURRENT_ROBOT_ID}" -H 'Content-Type: application/json' -d "${json_msg}" 2>/dev/null`
    fi

    # exit when command is nul
    if [ ${#command[*]} -lt 1 ]; then
        exit 0
    fi

    # run command
    job_start_time=`date`
    MSG_CommandOutput=`eval ${command[*]} 2>&1` && success="success" || success="failed"
    # connect message
    if [ "${FLAG_ShowFormat}" == "true" ]; then
        message=`echo -e "**START**\n> <font color=\\\\\"info\\\\\">${job_start_time}</font>\n\n**FINISH**\n> <font color=\\\\\"info\\\\\">$(date)</font>\n\n**Path**\n\n> <font color=\\\\\"comment\\\\\"> $(pwd)</font>\n\n"` 
        message=${message}`echo -e "\n\n**Cmd**\n\n> <font color=\\\\\"comment\\\\\">${command[*]}</font>\n\n"`
        if [ "$success" == "success" ]; then
            message=${message}`echo -e "\n\n**Status**\n\n> <font color=\\\\\"info\\\\\">${success}</font>\n\n"` 
        else
            message=${message}`echo -e "\n\n**Status**\n\n> <font color=\\\\\"warning\\\\\">${success}</font>\n\n"` 
        fi

        if [ "${FLAG_ShowOutPut}" == "true" ]; then
        message=${message}`echo -e "\n\n**output**\n> "`
        message=${message}${MSG_CommandOutput} 
        fi
    else
        message=${message}${MSG_CommandOutput} 
    fi 

    json_msg="{ \"msgtype\": \"markdown\", \"markdown\": { \"content\": \"${message}\" } }"; 
    # send message
    info `curl "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${CURRENT_ROBOT_ID}" -H 'Content-Type: application/json' -d "${json_msg}" 2>/dev/null`
    # return code
    if [ ${success} == "failed" ]; then
        exit -1
    fi
}

main $@