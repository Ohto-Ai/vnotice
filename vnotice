#!/bin/bash 
VERSION="v1.0.3"

FILE_NAME="vnotice"
CONFIG_NAME="vnotice.config"
SELF_FILE=$0
INSTALL_FILE_NAME=$FILE_NAME.install
INSTALL_PATH=~/bin/
LINK_PATH=/usr/bin/
GITHUB_URL=https://github.com.cnpmjs.org/
GITHUBAPI_URL=https://api.github.com/
USER_REPO_NAME="Ohto-Ai/vnotice"

FLAG_ShowOutPut=false
FLAG_ShowFormat=true

# load setting
if [ -f $INSTALL_PATH$CONFIG_NAME ]; then
    source $INSTALL_PATH$CONFIG_NAME
fi
CURRENT_ROBOT_ID=$ROBOT_ID

MSG_CommandOutput="null"

function info()
{
    echo -ne "[Info] vnotice: $*\n"
}

function query_latest_version()
{
    pattern="tag_name"
    json=`curl "${GITHUBAPI_URL}repos/$USER_REPO_NAME/releases/latest" 2>/dev/null`
    echo $json | grep -Po "\"$pattern\":.*?[^\\\\]\","| perl -pe "s/\"$pattern\":\\s*//; s/^\"//; s/\",$//"
}

function download_version()
{
    version=$1
    info "\033[33mFile downloading [$FILE_NAME]...\033[0m\n"
    wget -O $INSTALL_FILE_NAME $GITHUB_URL$USER_REPO_NAME/releases/download/$version/$FILE_NAME \
    && success=true || success=false
    if [ $success ]; then
        info "Download \033[33msuccess\033[0m\n" 
    else
        info "Download \033[31mfailed\033[0m\n"           
    fi
    return $success
}

function check_install()
{
    if [ -L $LINK_PATH$FILE_NAME ] && [ -f $INSTALL_PATH$FILE_NAME ]; then
        return 0
    fi
    return -1
}

function query_installed_version()
{
    msg=`vnotice -v 2>/dev/null`
    echo ${msg#* }
}

function install()
{
    info "Installing..."

    if [ ! -d $INSTALL_PATH ]; then
        mkdir $INSTALL_PATH
    fi
    
    if [ -L $LINK_PATH$FILE_NAME ]; then
        sudo rm -rf $LINK_PATH$FILE_NAME
    fi

    mv $INSTALL_FILE_NAME $INSTALL_PATH$FILE_NAME && \
    chmod a+x $INSTALL_PATH$FILE_NAME && \
    sudo ln -s $INSTALL_PATH$FILE_NAME $LINK_PATH$FILE_NAME && \
    info "Install \033[33msuccess\033[0m\n" || info "Install \033[31mfailed\033[0m\n"
}


function lunch_install()
{
    info "Check install"

    check_install

    if [ $1 ]; then
        # force install this
        info "Force Install Version $VERSION ..."
        cp $SELF_FILE $INSTALL_FILE_NAME
        install
        exit 0
    fi


    if [ ! $? ]; then
        # install this
        info "Install Version $VERSION ..."
        cp $SELF_FILE $INSTALL_FILE_NAME
        install
    else
        INSTALLED_VERSION=`query_installed_version`
        if [ "$VERSION" \> "$INSTALLED_VERSION" ]; then
            # install this
            info "Install Version $VERSION ..."
            cp $SELF_FILE $INSTALL_FILE_NAME
            install
        fi
    fi

    # config robot_id
    if [ ! -f $INSTALL_PATH$CONFIG_NAME ]; then
        info -ne "Config ROBOT_ID: "
        read -a ROBOT_ID
        echo "ROBOT_ID=$ROBOT_ID" > $INSTALL_PATH$CONFIG_NAME
    fi

    INSTALLED_VERSION=`query_installed_version`

    # todo 添加定时升级任务
    info "Check update..."

    LATEST_VERSION=`query_latest_version`
    info "Latest version is $LATEST_VERSION"

    if [ $LATEST_VERSION"x" == "x" ]; then
        info "No Version Found!"
        exit 0;
    fi
    if [ $LATEST_VERSION \> $INSTALLED_VERSION ]; then
        info "Latest version $LATEST_VERSION found. Current version is $INSTALLED_VERSION"
        download_version $LATEST_VERSION
        if [ $? ]; then
            install
        else
            exit false
        fi
    else
        info "Current version $INSTALLED_VERSION is lateset version!"
    fi
    exit 0
}


if [ $# -eq 0 ]; then
    lunch_install
fi

FLAG_unknown_parameter=false
# set flags
for i in $(seq 1 $#); do 
    # echo "Debug: "${@:i:1}
    case ${@:i:1} in
        -i | --install)
            info "Lunch install"
            lunch_install true
            ;;
        -o | --output) 
            FLAG_ShowOutPut=true
            info "Open output"
            ;;
        -r | --robot) 
            CURRENT_ROBOT_ID=${@:i+1:1}
        	let i=i+1
            ;;
        -c | --command) 
            let i=i+1
            for j in $(seq $i $#); do 
                command[$j-$i]=${@:j:1}
            done
            info "Set command \"${command[*]}\""
            break
            ;;
        -v | --version)
            echo "vnotice ${VERSION}"
            exit 0
            ;;
        -u | --only-output)
            FLAG_ShowFormat=false
            info "Show output only"
            ;;
        -h | --help)
            echo \
'Usage: vnotice <tags> -c {command}
Description:
    -v | --version          show version
    -o | --output           open output 
    -r | --robot            choose robot
    -u | --only-output      show output only
    -c | --command          set commands
    -h | --help             show help
    -i | --install          force install this version
e.g.
    vnotice -c ls -l
    ls -l; vnotice -u -c echo "ls returned $?"
Contact:
    Dong Jie <boy_dongjie@foxmail.com>
    Zhu Guangfeng <zhu.thatboy@outlook.com>
    '
        exit 0;
        ;;
        *)
            info "Unknown parameter \"${@:i:1}\""
            FLAG_unknown_parameter=true
    esac
done
if [ "$FLAG_unknown_parameter" == "true" ]; then
exit -1
fi

# exit when command is nul
if [ ${#command[*]} -lt 1 ]; then
    exit 0
fi

# run command
job_start_time=`date`
MSG_CommandOutput=`eval ${command[*]} 2>&1` && success="success" || success="failed"
# connect message
if [ "${FLAG_ShowFormat}" == "true" ]; then
    message=`echo -e "**START**\n> <font color=\\\\\"info\\\\\">${job_start_time}</font>\n\n**FINISH**\n> <font color=\\\\\"info\\\\\">$(date)</font>\n\n**Path**\n\n> <font color=\\\\\"comment\\\\\"> $(pwd)</font>\n\n"` 
    message=${message}`echo -e "\n\n**Cmd**\n\n> <font color=\\\\\"comment\\\\\">${command[*]}</font>\n\n"`
    if [ "$success" == "success" ]; then
        message=${message}`echo -e "\n\n**Status**\n\n> <font color=\\\\\"info\\\\\">${success}</font>\n\n"` 
    else
        message=${message}`echo -e "\n\n**Status**\n\n> <font color=\\\\\"warning\\\\\">${success}</font>\n\n"` 
    fi

    if [ "${FLAG_ShowOutPut}" == "true" ]; then
       message=${message}`echo -e "\n\n**output**\n> "`
       message=${message}${MSG_CommandOutput} 
    fi
else
    message=${message}${MSG_CommandOutput} 
fi 

json_msg="{ \"msgtype\": \"markdown\", \"markdown\": { \"content\": \"${message}\" } }"; 
# send message
info `curl "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${CURRENT_ROBOT_ID}" -H 'Content-Type: application/json' -d "${json_msg}" 2>/dev/null`
# return code
if [ ${success} == "failed" ]; then
    exit -1
fi

