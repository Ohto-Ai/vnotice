#!/bin/bash 
VERSION="v1.0.0"

file_name="vnotice"
install_path=~/bin/
link_path=/usr/bin/
temp_file_name=$file_name.install

show_output="false"
show_command="true"
show_format="true"
command_output=""
job_start_time=`date`
robot_id=$ROBOT_ID

github_url=https://github.com.cnpmjs.org/
githubapi_url=https://api.github.com/
repo_name="Ohto-Ai/vnotice"

function query_latest_version()
{
    pattern="tag_name"
    json=`curl "${githubapi_url}repos/$repo_name/releases/latest" 2>/dev/null`
    echo $json | grep -Po "\"$pattern\":.*?[^\\\\]\","| perl -pe "s/\"$pattern\":\\s*//; s/^\"//; s/\",$//"
}

function download_version()
{
    version=$1
    echo -ne "\033[33mFile downloading [$file_name]...\033[0m\n"
    wget -O $temp_file_name $github_url$repo_name/releases/download/$version/$file_name \
    && success=0 || success=-1
    if [ $success == 0 ]; then
        echo -ne "Download \033[33msuccess\033[0m\n" 
    else
        echo -ne "Download \033[31mfailed\033[0m\n"           
    fi
    return $success
}

function check_install()
{
    if [ -L $link_path$file_name ] && [ -f $install_path$file_name ]; then
        return 0
    fi
    return -1
}

function query_installed_version()
{
    msg=`vnotice -v 2>/dev/null`
    echo ${msg#* }
}

function install()
{
    echo "Installing..."

    if [ ! -d $install_path ]; then
        mkdir $install_path
    fi
    
    if [ -L $link_path$file_name ]; then
        sudo rm -rf $link_path$file_name
    fi

    mv $temp_file_name $install_path$file_name && \
    chmod a+x $install_path$file_name && \
    sudo ln -s $install_path$file_name $link_path$file_name && \
    echo -ne "Install \033[33msuccess\033[0m\n" || echo -ne "Install \033[31mfailed\033[0m\n"
}

if [ $# -eq 0 ]; then
    echo "Check install"

    check_install
    if [ ! $? -eq  0 ]; then
        # install this
        cp $0 $temp_file_name
        install
    fi

    INSTALLED_VERSION=`query_installed_version`

    # todo 添加定时升级任务
    echo "Check update..."

    LATEST_VERSION=`query_latest_version`

    if [ $LATEST_VERSION"x" == "x" ]; then
        echo "No Version Found!"
        exit 0;
    fi
    if [ $LATEST_VERSION != $INSTALLED_VERSION ]; then
        echo "Latest version $LATEST_VERSION found. Current version is $INSTALLED_VERSION"
        download_version $LATEST_VERSION
        if [ $? -eq 0 ]; then
            install
        else
            exit -1
        fi
    else
        echo "Current Version $INSTALLED_VERSION is lateset version!"
    fi
    exit 0
fi

# set flags
for i in $(seq 1 $#); do 
    # echo "Debug: "${@:i:1}
    case ${@:i:1} in
        -o) 
            show_output="true"
            echo "Open output"
            ;;
        -r) 
            robot_id=${@:i+1:1}
        	let i=i+1
            ;;
        -h)
            show_command="false"
            echo "Hide command"
            ;;
        -c) 
            let i=i+1
            for j in $(seq $i $#); do 
                command[$j-$i]=${@:j:1}
            done
            echo "Set command \"${command[*]}\""
            break
            ;;
        -v)
            echo "vnotice ${VERSION}"
            exit 0
            ;;
        -u)
            show_format="false"
            echo "Hide fromat"
            ;;
        -help)
            echo \
'Usage: vnotice <tags> -c {command}
    -v version
    -o open output
    -r choose robot
    -h hide command
    -u hide format
    -c set commands
    -help show help
e.g.
    vnotice -c ls -l
    ls -l; vnotice -u -c echo "ls returned $?"
contact
    Dong Jie <dongjie5@huaqin.com>
    Zhu Guangfeng <zhu.thatboy@outlook.com> <zhuguangfeng@huaqin.com>
    '
        exit 0;
        ;;
    esac
done

if [ ${#command[*]} -lt 1 ]; then
    exit 0
fi

# set status
command_output=`eval ${command[*]} 2>&1` && success="success" || success="failed"
# connect message
if [ "${show_format}" == "true" ]; then
    message=`echo -e "**START**\n> <font color=\\\\\"info\\\\\">${job_start_time}</font>\n\n**FINISH**\n> <font color=\\\\\"info\\\\\">$(date)</font>\n\n**Path**\n\n> <font color=\\\\\"comment\\\\\"> $(pwd)</font>\n\n"` 

    if [ "${show_command}" == "true" ]; then
        message=${message}`echo -e "\n\n**Cmd**\n\n> <font color=\\\\\"comment\\\\\">${command[*]}</font>\n\n"`
    fi 
    if [ "$success" == "success" ]; then
        message=${message}`echo -e "\n\n**Status**\n\n> <font color=\\\\\"info\\\\\">${success}</font>\n\n"` 
    else
        message=${message}`echo -e "\n\n**Status**\n\n> <font color=\\\\\"warning\\\\\">${success}</font>\n\n"` 
    fi

    if [ "${show_output}" == "true" ]; then
       message=${message}`echo -e "\n\n**output**\n> "`
        message=${message}${command_output} 
    fi
else
    message=${message}${command_output} 
fi 

json_msg="{ \"msgtype\": \"markdown\", \"markdown\": { \"content\": \"${message}\" } }"; 
# send message
curl "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=${robot_id}" -H 'Content-Type: application/json' -d "${json_msg}"
echo 
# return code
if [ ${success} == "failed" ]; then
    exit -1
fi

